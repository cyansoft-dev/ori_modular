// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../features/collection/transaction/data/model/data_collection_dto.dart';
import '../../features/home/data/model/message_dto.dart';
import '../../features/kas_opname/menu/data/model/master_opname_dto.dart';
import '../../features/kas_opname/proses/data/model/summary_audit_dto.dart';
import '../../features/kas_opname/verifikasi/data/models/review_opname_dto.dart';
import '../../features/splash/data/model/user_dto.dart';
import '../../features/tenancy/data/model/data_tenant_dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8232934843087415227),
      name: 'DetailTransactionDto',
      lastPropertyId: const IdUid(8, 6588139351248176697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3395331390111786939),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3848984618137707205),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6511166198000238123),
            name: 'pathImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5530067015116549700),
            name: 'image',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3761917964990927980),
            name: 'transactionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6266388702486732304),
            relationTarget: 'DataCollectionDto'),
        ModelProperty(
            id: const IdUid(8, 6588139351248176697),
            name: 'seqno',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1842260362515623149),
      name: 'SummaryTransactionDto',
      lastPropertyId: const IdUid(7, 7083391253296304502),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6383739157828242629),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3409477007284999447),
            name: 'label',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6151473281301365941),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 332924733206702891),
            name: 'transactionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8221825114282649922),
            relationTarget: 'DataCollectionDto'),
        ModelProperty(
            id: const IdUid(6, 1788988726938989309),
            name: 'seqno',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7083391253296304502),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 2569026409322168770),
      name: 'UserDto',
      lastPropertyId: const IdUid(11, 2400611583415660282),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1179167173467332850),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3845111968201020048),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4481262761564268352),
            name: 'namalengkap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1522247215522370364),
            name: 'kodecabang',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 49762497978402097),
            name: 'namacabang',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1031636458380791893),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 562722520916765807),
            name: 'refreshToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5417131353531643549),
            name: 'jabatan',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1881216648018816675),
            name: 'departement',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2400611583415660282),
            name: 'isStore',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4946845259824490704),
      name: 'MessageDto',
      lastPropertyId: const IdUid(6, 3600934362607290533),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7158886909019689042),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 4810042801894220045),
            name: 'read',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3600934362607290533),
            name: 'data',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 3295395790346718037),
      name: 'MasterOpnameDto',
      lastPropertyId: const IdUid(11, 1419789978375143412),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2959126407752609358),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4270645578334843494),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8024530356607160363),
            name: 'notaRrak',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5392116197479866865),
            name: 'toko',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8631647896218025935),
            name: 'danaKas',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1419789978375143412),
            name: 'salesCurrent',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'kurangSetor', srcEntity: 'KurangSetorDto', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(10, 5148506624434846070),
      name: 'DataTenantDto',
      lastPropertyId: const IdUid(15, 1428229243670574260),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2822127776308409350),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4491110117835658602),
            name: 'kdtk',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 381555043939399024),
            name: 'noPsm',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2930221228894779304),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6733564413761653092),
            name: 'tenantImage',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2039797553399150558),
            name: 'storeImage',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1084105644413112342),
            name: 'isActive',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 502573371921611048),
            name: 'addTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5956847030483882154),
            name: 'tenantPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1910761793685237781),
            name: 'storePath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6737847573493047650),
            name: 'jenisProduk',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3886220415073590274),
            name: 'latitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1428229243670574260),
            name: 'longitude',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 4028148672089662179),
      name: 'DataCollectionDto',
      lastPropertyId: const IdUid(10, 541421985721798198),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6235899297434956900),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 668525702660936014),
            name: 'kdtk',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9209726766610193895),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 716906295647841911),
            name: 'delivery',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4673485695815311734),
            name: 'idDelivery',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1785207004482635676),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4968047129390144044),
            name: 'shift',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8317531560935722005),
            name: 'pathImage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5750643565926184800),
            name: 'image',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 541421985721798198),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'detail',
            srcEntity: 'DetailTransactionDto',
            srcField: 'transaction'),
        ModelBacklink(
            name: 'summary',
            srcEntity: 'SummaryTransactionDto',
            srcField: 'transaction')
      ]),
  ModelEntity(
      id: const IdUid(13, 8764448098414700375),
      name: 'MinusFraudDto',
      lastPropertyId: const IdUid(9, 5493148859103464183),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5268009777201454863),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3550617749886013238),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7343328837728327198),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6740943243511847023),
            name: 'modus',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8424634359808522668),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9080403717703802634),
            name: 'refundStatus',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6151216798337020922),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3840471725099350339),
            name: 'sanksi',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5493148859103464183),
            name: 'image',
            type: 23,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 1669581220333080987),
      name: 'MinusOtherDto',
      lastPropertyId: const IdUid(2, 2309337366644279682),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7424467598186915904),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2309337366644279682),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 8154180972425922875),
      name: 'MinusRrakDto',
      lastPropertyId: const IdUid(3, 1144336527217731497),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2848166083475192145),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4851631437367721606),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1144336527217731497),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 2923251674075371685),
      name: 'MinusVarianDto',
      lastPropertyId: const IdUid(4, 2406490773056751637),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9112115576239308521),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 563157858410507168),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5529114014505122938),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2406490773056751637),
            name: 'status',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 2268202696213513731),
      name: 'ReviewOpnameDto',
      lastPropertyId: const IdUid(5, 3755351099307431866),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3896003572446702956),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6789198366271483904),
            name: 'kdtk',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4839279029173909068),
            name: 'fraudId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 6805206044778478331),
            relationTarget: 'MinusFraudDto'),
        ModelProperty(
            id: const IdUid(4, 88660185919006966),
            name: 'varianId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 290951639689723846),
            relationTarget: 'MinusVarianDto'),
        ModelProperty(
            id: const IdUid(5, 3755351099307431866),
            name: 'otherId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 9086210474570755907),
            relationTarget: 'MinusOtherDto')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5901753694986882983),
            name: 'rrak',
            targetId: const IdUid(15, 8154180972425922875))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 422157466437429482),
      name: 'AdjustmentAuditDto',
      lastPropertyId: const IdUid(4, 5785949979085255608),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4373144994124353311),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7139692286443098058),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 978926097615604562),
            name: 'desc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5785949979085255608),
            name: 'summaryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 5748366892335433012),
            relationTarget: 'SummaryAuditDto')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 3628446464184133021),
      name: 'SummaryAuditDto',
      lastPropertyId: const IdUid(5, 391586806509146594),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6277565669947570969),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5824929696025856716),
            name: 'toko',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4939522669266338546),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 944552597611241676),
            name: 'values',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 391586806509146594),
            name: 'status',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'adjust',
            srcEntity: 'AdjustmentAuditDto',
            srcField: 'summary')
      ]),
  ModelEntity(
      id: const IdUid(20, 8045073363106513127),
      name: 'KurangSetorDto',
      lastPropertyId: const IdUid(4, 4174219852625555018),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1410576719041200061),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 739901224641710051),
            name: 'tanggal',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3266330514030753634),
            name: 'nominal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4174219852625555018),
            name: 'summaryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 4111383803756500249),
            relationTarget: 'MasterOpnameDto')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(20, 8045073363106513127),
      lastIndexId: const IdUid(7, 4111383803756500249),
      lastRelationId: const IdUid(1, 5901753694986882983),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        1372808077417560656,
        1717406861681400125,
        5415865140312534298,
        2256544044456875332,
        3808833552589199317
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3605787884090904504,
        9197449292650275365,
        663380935250167588,
        2799014879296497962,
        6113426774907598975,
        5381110183089124508,
        6536259606676237946,
        6356907225751111787,
        5453097725057177130,
        7326935000733494206,
        3943856655219642262,
        8160454244239882508,
        7559887659065091880,
        1484946232205907354,
        6243527547745824193,
        5449538360463873457,
        799580305172770242,
        7739308587633315175,
        1805572751279984093,
        2491749845887786352,
        2691748545618413425,
        6744019102414114370,
        9101691790776042203,
        4758951478067723166,
        7166694981400656253,
        5366488558233851359,
        3045439292131274842,
        1270158934174153016,
        34320349626730124,
        5309780112450010242,
        2684433962551565612,
        3552848683121367554,
        6617206428070669206,
        8131044893042386976,
        2623730234609118369,
        8199587643987638317,
        3664227605227370882,
        4295509868857615611,
        6651360644248361047,
        2309215021930502924,
        3630394726246939293
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DetailTransactionDto: EntityDefinition<DetailTransactionDto>(
        model: _entities[0],
        toOneRelations: (DetailTransactionDto object) => [object.transaction],
        toManyRelations: (DetailTransactionDto object) => {},
        getId: (DetailTransactionDto object) => object.id,
        setId: (DetailTransactionDto object, int id) {
          object.id = id;
        },
        objectToFB: (DetailTransactionDto object, fb.Builder fbb) {
          final pathImageOffset = object.pathImage == null
              ? null
              : fbb.writeString(object.pathImage!);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(2, object.nominal);
          fbb.addOffset(3, pathImageOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addInt64(5, object.transaction.targetId);
          fbb.addInt64(7, object.seqno);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DetailTransactionDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              seqno: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              pathImage: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              image: const fb.Uint8ListReader(lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12) as Uint8List?);
          object.transaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.transaction.attach(store);
          return object;
        }),
    SummaryTransactionDto: EntityDefinition<SummaryTransactionDto>(
        model: _entities[1],
        toOneRelations: (SummaryTransactionDto object) => [object.transaction],
        toManyRelations: (SummaryTransactionDto object) => {},
        getId: (SummaryTransactionDto object) => object.id,
        setId: (SummaryTransactionDto object, int id) {
          object.id = id;
        },
        objectToFB: (SummaryTransactionDto object, fb.Builder fbb) {
          final labelOffset =
              object.label == null ? null : fbb.writeString(object.label!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, labelOffset);
          fbb.addFloat64(3, object.nominal);
          fbb.addInt64(4, object.transaction.targetId);
          fbb.addInt64(5, object.seqno);
          fbb.addOffset(6, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SummaryTransactionDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              seqno: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              label: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));
          object.transaction.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.transaction.attach(store);
          return object;
        }),
    UserDto: EntityDefinition<UserDto>(
        model: _entities[2],
        toOneRelations: (UserDto object) => [],
        toManyRelations: (UserDto object) => {},
        getId: (UserDto object) => object.id,
        setId: (UserDto object, int id) {
          object.id = id;
        },
        objectToFB: (UserDto object, fb.Builder fbb) {
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final namalengkapOffset = object.namalengkap == null
              ? null
              : fbb.writeString(object.namalengkap!);
          final kodecabangOffset = object.kodecabang == null
              ? null
              : fbb.writeString(object.kodecabang!);
          final namacabangOffset = object.namacabang == null
              ? null
              : fbb.writeString(object.namacabang!);
          final tokenOffset =
              object.token == null ? null : fbb.writeString(object.token!);
          final refreshTokenOffset = object.refreshToken == null
              ? null
              : fbb.writeString(object.refreshToken!);
          final jabatanOffset =
              object.jabatan == null ? null : fbb.writeString(object.jabatan!);
          final departementOffset = object.departement == null
              ? null
              : fbb.writeString(object.departement!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, namalengkapOffset);
          fbb.addOffset(4, kodecabangOffset);
          fbb.addOffset(5, namacabangOffset);
          fbb.addOffset(6, tokenOffset);
          fbb.addOffset(7, refreshTokenOffset);
          fbb.addOffset(8, jabatanOffset);
          fbb.addOffset(9, departementOffset);
          fbb.addBool(10, object.isStore);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              namalengkap: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              kodecabang: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              namacabang: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              jabatan: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              departement: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              isStore: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              token:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              refreshToken: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18));

          return object;
        }),
    MessageDto: EntityDefinition<MessageDto>(
        model: _entities[3],
        toOneRelations: (MessageDto object) => [],
        toManyRelations: (MessageDto object) => {},
        getId: (MessageDto object) => object.id,
        setId: (MessageDto object, int id) {
          object.id = id;
        },
        objectToFB: (MessageDto object, fb.Builder fbb) {
          final dataOffset =
              object.data == null ? null : fbb.writeString(object.data!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addBool(4, object.read);
          fbb.addOffset(5, dataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MessageDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              read: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));

          return object;
        }),
    MasterOpnameDto: EntityDefinition<MasterOpnameDto>(
        model: _entities[4],
        toOneRelations: (MasterOpnameDto object) => [],
        toManyRelations: (MasterOpnameDto object) => {
              RelInfo<KurangSetorDto>.toOneBacklink(4, object.id,
                      (KurangSetorDto srcObject) => srcObject.summary):
                  object.kurangSetor
            },
        getId: (MasterOpnameDto object) => object.id,
        setId: (MasterOpnameDto object, int id) {
          object.id = id;
        },
        objectToFB: (MasterOpnameDto object, fb.Builder fbb) {
          final tokoOffset =
              object.toko == null ? null : fbb.writeString(object.toko!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tanggal?.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.notaRrak);
          fbb.addOffset(7, tokoOffset);
          fbb.addFloat64(9, object.danaKas);
          fbb.addFloat64(10, object.salesCurrent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = MasterOpnameDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              toko: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              danaKas: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 22),
              salesCurrent: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 24),
              notaRrak: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14));
          InternalToManyAccess.setRelInfo(
              object.kurangSetor,
              store,
              RelInfo<KurangSetorDto>.toOneBacklink(4, object.id,
                  (KurangSetorDto srcObject) => srcObject.summary),
              store.box<MasterOpnameDto>());
          return object;
        }),
    DataTenantDto: EntityDefinition<DataTenantDto>(
        model: _entities[5],
        toOneRelations: (DataTenantDto object) => [],
        toManyRelations: (DataTenantDto object) => {},
        getId: (DataTenantDto object) => object.id,
        setId: (DataTenantDto object, int id) {
          object.id = id;
        },
        objectToFB: (DataTenantDto object, fb.Builder fbb) {
          final kdtkOffset =
              object.kdtk == null ? null : fbb.writeString(object.kdtk!);
          final noPsmOffset =
              object.noPsm == null ? null : fbb.writeString(object.noPsm!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final tenantImageOffset = object.tenantImage == null
              ? null
              : fbb.writeListInt8(object.tenantImage!);
          final storeImageOffset = object.storeImage == null
              ? null
              : fbb.writeListInt8(object.storeImage!);
          final tenantPathOffset = object.tenantPath == null
              ? null
              : fbb.writeString(object.tenantPath!);
          final storePathOffset = object.storePath == null
              ? null
              : fbb.writeString(object.storePath!);
          final jenisProdukOffset = object.jenisProduk == null
              ? null
              : fbb.writeString(object.jenisProduk!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kdtkOffset);
          fbb.addOffset(2, noPsmOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addOffset(4, tenantImageOffset);
          fbb.addOffset(5, storeImageOffset);
          fbb.addBool(8, object.isActive);
          fbb.addInt64(9, object.addTime?.millisecondsSinceEpoch);
          fbb.addOffset(10, tenantPathOffset);
          fbb.addOffset(11, storePathOffset);
          fbb.addOffset(12, jenisProdukOffset);
          fbb.addFloat64(13, object.latitude);
          fbb.addFloat64(14, object.longitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final addTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = DataTenantDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              kdtk: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              noPsm: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              jenisProduk: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              isActive: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 20),
              tenantPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              tenantImage: const fb.Uint8ListReader(lazy: false)
                  .vTableGetNullable(buffer, rootOffset, 12) as Uint8List?,
              storePath: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              storeImage: const fb.Uint8ListReader(lazy: false).vTableGetNullable(buffer, rootOffset, 14) as Uint8List?,
              latitude: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 30),
              longitude: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 32),
              addTime: addTimeValue == null ? null : DateTime.fromMillisecondsSinceEpoch(addTimeValue));

          return object;
        }),
    DataCollectionDto: EntityDefinition<DataCollectionDto>(
        model: _entities[6],
        toOneRelations: (DataCollectionDto object) => [],
        toManyRelations: (DataCollectionDto object) => {
              RelInfo<DetailTransactionDto>.toOneBacklink(
                  6,
                  object.id,
                  (DetailTransactionDto srcObject) =>
                      srcObject.transaction): object.detail,
              RelInfo<SummaryTransactionDto>.toOneBacklink(
                  5,
                  object.id,
                  (SummaryTransactionDto srcObject) =>
                      srcObject.transaction): object.summary
            },
        getId: (DataCollectionDto object) => object.id,
        setId: (DataCollectionDto object, int id) {
          object.id = id;
        },
        objectToFB: (DataCollectionDto object, fb.Builder fbb) {
          final kdtkOffset =
              object.kdtk == null ? null : fbb.writeString(object.kdtk!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final deliveryOffset = object.delivery == null
              ? null
              : fbb.writeString(object.delivery!);
          final idDeliveryOffset = object.idDelivery == null
              ? null
              : fbb.writeString(object.idDelivery!);
          final shiftOffset =
              object.shift == null ? null : fbb.writeString(object.shift!);
          final pathImageOffset = object.pathImage == null
              ? null
              : fbb.writeString(object.pathImage!);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kdtkOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, deliveryOffset);
          fbb.addOffset(4, idDeliveryOffset);
          fbb.addInt64(5, object.tanggal?.millisecondsSinceEpoch);
          fbb.addOffset(6, shiftOffset);
          fbb.addOffset(7, pathImageOffset);
          fbb.addOffset(8, imageOffset);
          fbb.addOffset(9, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = DataCollectionDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              kdtk: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              delivery: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              idDelivery: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              shift: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              pathImage: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              image: const fb.Uint8ListReader(lazy: false).vTableGetNullable(buffer, rootOffset, 20)
                  as Uint8List?,
              status: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22));
          InternalToManyAccess.setRelInfo(
              object.detail,
              store,
              RelInfo<DetailTransactionDto>.toOneBacklink(6, object.id,
                  (DetailTransactionDto srcObject) => srcObject.transaction),
              store.box<DataCollectionDto>());
          InternalToManyAccess.setRelInfo(
              object.summary,
              store,
              RelInfo<SummaryTransactionDto>.toOneBacklink(5, object.id,
                  (SummaryTransactionDto srcObject) => srcObject.transaction),
              store.box<DataCollectionDto>());
          return object;
        }),
    MinusFraudDto: EntityDefinition<MinusFraudDto>(
        model: _entities[7],
        toOneRelations: (MinusFraudDto object) => [],
        toManyRelations: (MinusFraudDto object) => {},
        getId: (MinusFraudDto object) => object.id,
        setId: (MinusFraudDto object, int id) {
          object.id = id;
        },
        objectToFB: (MinusFraudDto object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final modusOffset =
              object.modus == null ? null : fbb.writeString(object.modus!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final sanksiOffset =
              object.sanksi == null ? null : fbb.writeString(object.sanksi!);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addFloat64(2, object.nominal);
          fbb.addOffset(3, modusOffset);
          fbb.addInt64(4, object.tanggal?.millisecondsSinceEpoch);
          fbb.addBool(5, object.refundStatus);
          fbb.addOffset(6, descriptionOffset);
          fbb.addOffset(7, sanksiOffset);
          fbb.addOffset(8, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = MinusFraudDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              modus: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              refundStatus: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              sanksi: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..image = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 20) as Uint8List?;

          return object;
        }),
    MinusOtherDto: EntityDefinition<MinusOtherDto>(
        model: _entities[8],
        toOneRelations: (MinusOtherDto object) => [],
        toManyRelations: (MinusOtherDto object) => {},
        getId: (MinusOtherDto object) => object.id,
        setId: (MinusOtherDto object, int id) {
          object.id = id;
        },
        objectToFB: (MinusOtherDto object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MinusOtherDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6));

          return object;
        }),
    MinusRrakDto: EntityDefinition<MinusRrakDto>(
        model: _entities[9],
        toOneRelations: (MinusRrakDto object) => [],
        toManyRelations: (MinusRrakDto object) => {},
        getId: (MinusRrakDto object) => object.id,
        setId: (MinusRrakDto object, int id) {
          object.id = id;
        },
        objectToFB: (MinusRrakDto object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.nominal);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MinusRrakDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    MinusVarianDto: EntityDefinition<MinusVarianDto>(
        model: _entities[10],
        toOneRelations: (MinusVarianDto object) => [],
        toManyRelations: (MinusVarianDto object) => {},
        getId: (MinusVarianDto object) => object.id,
        setId: (MinusVarianDto object, int id) {
          object.id = id;
        },
        objectToFB: (MinusVarianDto object, fb.Builder fbb) {
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tanggal?.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.nominal);
          fbb.addOffset(3, statusOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = MinusVarianDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    ReviewOpnameDto: EntityDefinition<ReviewOpnameDto>(
        model: _entities[11],
        toOneRelations: (ReviewOpnameDto object) =>
            [object.fraud, object.varian, object.other],
        toManyRelations: (ReviewOpnameDto object) =>
            {RelInfo<ReviewOpnameDto>.toMany(1, object.id): object.rrak},
        getId: (ReviewOpnameDto object) => object.id,
        setId: (ReviewOpnameDto object, int id) {
          object.id = id;
        },
        objectToFB: (ReviewOpnameDto object, fb.Builder fbb) {
          final kdtkOffset =
              object.kdtk == null ? null : fbb.writeString(object.kdtk!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, kdtkOffset);
          fbb.addInt64(2, object.fraud.targetId);
          fbb.addInt64(3, object.varian.targetId);
          fbb.addInt64(4, object.other.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ReviewOpnameDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              kdtk: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6));
          object.fraud.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.fraud.attach(store);
          object.varian.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.varian.attach(store);
          object.other.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.other.attach(store);
          InternalToManyAccess.setRelInfo(
              object.rrak,
              store,
              RelInfo<ReviewOpnameDto>.toMany(1, object.id),
              store.box<ReviewOpnameDto>());
          return object;
        }),
    AdjustmentAuditDto: EntityDefinition<AdjustmentAuditDto>(
        model: _entities[12],
        toOneRelations: (AdjustmentAuditDto object) => [object.summary],
        toManyRelations: (AdjustmentAuditDto object) => {},
        getId: (AdjustmentAuditDto object) => object.id,
        setId: (AdjustmentAuditDto object, int id) {
          object.id = id;
        },
        objectToFB: (AdjustmentAuditDto object, fb.Builder fbb) {
          final descOffset =
              object.desc == null ? null : fbb.writeString(object.desc!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.nominal);
          fbb.addOffset(2, descOffset);
          fbb.addInt64(3, object.summary.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AdjustmentAuditDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nominal:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              desc: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));
          object.summary.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.summary.attach(store);
          return object;
        }),
    SummaryAuditDto: EntityDefinition<SummaryAuditDto>(
        model: _entities[13],
        toOneRelations: (SummaryAuditDto object) => [],
        toManyRelations: (SummaryAuditDto object) => {
              RelInfo<AdjustmentAuditDto>.toOneBacklink(4, object.id,
                      (AdjustmentAuditDto srcObject) => srcObject.summary):
                  object.adjust
            },
        getId: (SummaryAuditDto object) => object.id,
        setId: (SummaryAuditDto object, int id) {
          object.id = id;
        },
        objectToFB: (SummaryAuditDto object, fb.Builder fbb) {
          final tokoOffset =
              object.toko == null ? null : fbb.writeString(object.toko!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tokoOffset);
          fbb.addInt64(2, object.tanggal?.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.values);
          fbb.addInt64(4, object.status);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = SummaryAuditDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              toko: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              values: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..status = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 12);
          InternalToManyAccess.setRelInfo(
              object.adjust,
              store,
              RelInfo<AdjustmentAuditDto>.toOneBacklink(4, object.id,
                  (AdjustmentAuditDto srcObject) => srcObject.summary),
              store.box<SummaryAuditDto>());
          return object;
        }),
    KurangSetorDto: EntityDefinition<KurangSetorDto>(
        model: _entities[14],
        toOneRelations: (KurangSetorDto object) => [object.summary],
        toManyRelations: (KurangSetorDto object) => {},
        getId: (KurangSetorDto object) => object.id,
        setId: (KurangSetorDto object, int id) {
          object.id = id;
        },
        objectToFB: (KurangSetorDto object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.tanggal?.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.nominal);
          fbb.addInt64(3, object.summary.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tanggalValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = KurangSetorDto(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              tanggal: tanggalValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(tanggalValue),
              nominal: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8));
          object.summary.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.summary.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DetailTransactionDto] entity fields to define ObjectBox queries.
class DetailTransactionDto_ {
  /// see [DetailTransactionDto.id]
  static final id =
      QueryIntegerProperty<DetailTransactionDto>(_entities[0].properties[0]);

  /// see [DetailTransactionDto.nominal]
  static final nominal =
      QueryDoubleProperty<DetailTransactionDto>(_entities[0].properties[1]);

  /// see [DetailTransactionDto.pathImage]
  static final pathImage =
      QueryStringProperty<DetailTransactionDto>(_entities[0].properties[2]);

  /// see [DetailTransactionDto.image]
  static final image =
      QueryByteVectorProperty<DetailTransactionDto>(_entities[0].properties[3]);

  /// see [DetailTransactionDto.transaction]
  static final transaction =
      QueryRelationToOne<DetailTransactionDto, DataCollectionDto>(
          _entities[0].properties[4]);

  /// see [DetailTransactionDto.seqno]
  static final seqno =
      QueryIntegerProperty<DetailTransactionDto>(_entities[0].properties[5]);
}

/// [SummaryTransactionDto] entity fields to define ObjectBox queries.
class SummaryTransactionDto_ {
  /// see [SummaryTransactionDto.id]
  static final id =
      QueryIntegerProperty<SummaryTransactionDto>(_entities[1].properties[0]);

  /// see [SummaryTransactionDto.label]
  static final label =
      QueryStringProperty<SummaryTransactionDto>(_entities[1].properties[1]);

  /// see [SummaryTransactionDto.nominal]
  static final nominal =
      QueryDoubleProperty<SummaryTransactionDto>(_entities[1].properties[2]);

  /// see [SummaryTransactionDto.transaction]
  static final transaction =
      QueryRelationToOne<SummaryTransactionDto, DataCollectionDto>(
          _entities[1].properties[3]);

  /// see [SummaryTransactionDto.seqno]
  static final seqno =
      QueryIntegerProperty<SummaryTransactionDto>(_entities[1].properties[4]);

  /// see [SummaryTransactionDto.description]
  static final description =
      QueryStringProperty<SummaryTransactionDto>(_entities[1].properties[5]);
}

/// [UserDto] entity fields to define ObjectBox queries.
class UserDto_ {
  /// see [UserDto.id]
  static final id = QueryIntegerProperty<UserDto>(_entities[2].properties[0]);

  /// see [UserDto.username]
  static final username =
      QueryStringProperty<UserDto>(_entities[2].properties[1]);

  /// see [UserDto.namalengkap]
  static final namalengkap =
      QueryStringProperty<UserDto>(_entities[2].properties[2]);

  /// see [UserDto.kodecabang]
  static final kodecabang =
      QueryStringProperty<UserDto>(_entities[2].properties[3]);

  /// see [UserDto.namacabang]
  static final namacabang =
      QueryStringProperty<UserDto>(_entities[2].properties[4]);

  /// see [UserDto.token]
  static final token = QueryStringProperty<UserDto>(_entities[2].properties[5]);

  /// see [UserDto.refreshToken]
  static final refreshToken =
      QueryStringProperty<UserDto>(_entities[2].properties[6]);

  /// see [UserDto.jabatan]
  static final jabatan =
      QueryStringProperty<UserDto>(_entities[2].properties[7]);

  /// see [UserDto.departement]
  static final departement =
      QueryStringProperty<UserDto>(_entities[2].properties[8]);

  /// see [UserDto.isStore]
  static final isStore =
      QueryBooleanProperty<UserDto>(_entities[2].properties[9]);
}

/// [MessageDto] entity fields to define ObjectBox queries.
class MessageDto_ {
  /// see [MessageDto.id]
  static final id =
      QueryIntegerProperty<MessageDto>(_entities[3].properties[0]);

  /// see [MessageDto.read]
  static final read =
      QueryBooleanProperty<MessageDto>(_entities[3].properties[1]);

  /// see [MessageDto.data]
  static final data =
      QueryStringProperty<MessageDto>(_entities[3].properties[2]);
}

/// [MasterOpnameDto] entity fields to define ObjectBox queries.
class MasterOpnameDto_ {
  /// see [MasterOpnameDto.id]
  static final id =
      QueryIntegerProperty<MasterOpnameDto>(_entities[4].properties[0]);

  /// see [MasterOpnameDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<MasterOpnameDto>(_entities[4].properties[1]);

  /// see [MasterOpnameDto.notaRrak]
  static final notaRrak =
      QueryDoubleProperty<MasterOpnameDto>(_entities[4].properties[2]);

  /// see [MasterOpnameDto.toko]
  static final toko =
      QueryStringProperty<MasterOpnameDto>(_entities[4].properties[3]);

  /// see [MasterOpnameDto.danaKas]
  static final danaKas =
      QueryDoubleProperty<MasterOpnameDto>(_entities[4].properties[4]);

  /// see [MasterOpnameDto.salesCurrent]
  static final salesCurrent =
      QueryDoubleProperty<MasterOpnameDto>(_entities[4].properties[5]);
}

/// [DataTenantDto] entity fields to define ObjectBox queries.
class DataTenantDto_ {
  /// see [DataTenantDto.id]
  static final id =
      QueryIntegerProperty<DataTenantDto>(_entities[5].properties[0]);

  /// see [DataTenantDto.kdtk]
  static final kdtk =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[1]);

  /// see [DataTenantDto.noPsm]
  static final noPsm =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[2]);

  /// see [DataTenantDto.status]
  static final status =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[3]);

  /// see [DataTenantDto.tenantImage]
  static final tenantImage =
      QueryByteVectorProperty<DataTenantDto>(_entities[5].properties[4]);

  /// see [DataTenantDto.storeImage]
  static final storeImage =
      QueryByteVectorProperty<DataTenantDto>(_entities[5].properties[5]);

  /// see [DataTenantDto.isActive]
  static final isActive =
      QueryBooleanProperty<DataTenantDto>(_entities[5].properties[6]);

  /// see [DataTenantDto.addTime]
  static final addTime =
      QueryIntegerProperty<DataTenantDto>(_entities[5].properties[7]);

  /// see [DataTenantDto.tenantPath]
  static final tenantPath =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[8]);

  /// see [DataTenantDto.storePath]
  static final storePath =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[9]);

  /// see [DataTenantDto.jenisProduk]
  static final jenisProduk =
      QueryStringProperty<DataTenantDto>(_entities[5].properties[10]);

  /// see [DataTenantDto.latitude]
  static final latitude =
      QueryDoubleProperty<DataTenantDto>(_entities[5].properties[11]);

  /// see [DataTenantDto.longitude]
  static final longitude =
      QueryDoubleProperty<DataTenantDto>(_entities[5].properties[12]);
}

/// [DataCollectionDto] entity fields to define ObjectBox queries.
class DataCollectionDto_ {
  /// see [DataCollectionDto.id]
  static final id =
      QueryIntegerProperty<DataCollectionDto>(_entities[6].properties[0]);

  /// see [DataCollectionDto.kdtk]
  static final kdtk =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[1]);

  /// see [DataCollectionDto.type]
  static final type =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[2]);

  /// see [DataCollectionDto.delivery]
  static final delivery =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[3]);

  /// see [DataCollectionDto.idDelivery]
  static final idDelivery =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[4]);

  /// see [DataCollectionDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<DataCollectionDto>(_entities[6].properties[5]);

  /// see [DataCollectionDto.shift]
  static final shift =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[6]);

  /// see [DataCollectionDto.pathImage]
  static final pathImage =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[7]);

  /// see [DataCollectionDto.image]
  static final image =
      QueryByteVectorProperty<DataCollectionDto>(_entities[6].properties[8]);

  /// see [DataCollectionDto.status]
  static final status =
      QueryStringProperty<DataCollectionDto>(_entities[6].properties[9]);
}

/// [MinusFraudDto] entity fields to define ObjectBox queries.
class MinusFraudDto_ {
  /// see [MinusFraudDto.id]
  static final id =
      QueryIntegerProperty<MinusFraudDto>(_entities[7].properties[0]);

  /// see [MinusFraudDto.userId]
  static final userId =
      QueryStringProperty<MinusFraudDto>(_entities[7].properties[1]);

  /// see [MinusFraudDto.nominal]
  static final nominal =
      QueryDoubleProperty<MinusFraudDto>(_entities[7].properties[2]);

  /// see [MinusFraudDto.modus]
  static final modus =
      QueryStringProperty<MinusFraudDto>(_entities[7].properties[3]);

  /// see [MinusFraudDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<MinusFraudDto>(_entities[7].properties[4]);

  /// see [MinusFraudDto.refundStatus]
  static final refundStatus =
      QueryBooleanProperty<MinusFraudDto>(_entities[7].properties[5]);

  /// see [MinusFraudDto.description]
  static final description =
      QueryStringProperty<MinusFraudDto>(_entities[7].properties[6]);

  /// see [MinusFraudDto.sanksi]
  static final sanksi =
      QueryStringProperty<MinusFraudDto>(_entities[7].properties[7]);

  /// see [MinusFraudDto.image]
  static final image =
      QueryByteVectorProperty<MinusFraudDto>(_entities[7].properties[8]);
}

/// [MinusOtherDto] entity fields to define ObjectBox queries.
class MinusOtherDto_ {
  /// see [MinusOtherDto.id]
  static final id =
      QueryIntegerProperty<MinusOtherDto>(_entities[8].properties[0]);

  /// see [MinusOtherDto.description]
  static final description =
      QueryStringProperty<MinusOtherDto>(_entities[8].properties[1]);
}

/// [MinusRrakDto] entity fields to define ObjectBox queries.
class MinusRrakDto_ {
  /// see [MinusRrakDto.id]
  static final id =
      QueryIntegerProperty<MinusRrakDto>(_entities[9].properties[0]);

  /// see [MinusRrakDto.nominal]
  static final nominal =
      QueryDoubleProperty<MinusRrakDto>(_entities[9].properties[1]);

  /// see [MinusRrakDto.description]
  static final description =
      QueryStringProperty<MinusRrakDto>(_entities[9].properties[2]);
}

/// [MinusVarianDto] entity fields to define ObjectBox queries.
class MinusVarianDto_ {
  /// see [MinusVarianDto.id]
  static final id =
      QueryIntegerProperty<MinusVarianDto>(_entities[10].properties[0]);

  /// see [MinusVarianDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<MinusVarianDto>(_entities[10].properties[1]);

  /// see [MinusVarianDto.nominal]
  static final nominal =
      QueryDoubleProperty<MinusVarianDto>(_entities[10].properties[2]);

  /// see [MinusVarianDto.status]
  static final status =
      QueryStringProperty<MinusVarianDto>(_entities[10].properties[3]);
}

/// [ReviewOpnameDto] entity fields to define ObjectBox queries.
class ReviewOpnameDto_ {
  /// see [ReviewOpnameDto.id]
  static final id =
      QueryIntegerProperty<ReviewOpnameDto>(_entities[11].properties[0]);

  /// see [ReviewOpnameDto.kdtk]
  static final kdtk =
      QueryStringProperty<ReviewOpnameDto>(_entities[11].properties[1]);

  /// see [ReviewOpnameDto.fraud]
  static final fraud = QueryRelationToOne<ReviewOpnameDto, MinusFraudDto>(
      _entities[11].properties[2]);

  /// see [ReviewOpnameDto.varian]
  static final varian = QueryRelationToOne<ReviewOpnameDto, MinusVarianDto>(
      _entities[11].properties[3]);

  /// see [ReviewOpnameDto.other]
  static final other = QueryRelationToOne<ReviewOpnameDto, MinusOtherDto>(
      _entities[11].properties[4]);

  /// see [ReviewOpnameDto.rrak]
  static final rrak = QueryRelationToMany<ReviewOpnameDto, MinusRrakDto>(
      _entities[11].relations[0]);
}

/// [AdjustmentAuditDto] entity fields to define ObjectBox queries.
class AdjustmentAuditDto_ {
  /// see [AdjustmentAuditDto.id]
  static final id =
      QueryIntegerProperty<AdjustmentAuditDto>(_entities[12].properties[0]);

  /// see [AdjustmentAuditDto.nominal]
  static final nominal =
      QueryDoubleProperty<AdjustmentAuditDto>(_entities[12].properties[1]);

  /// see [AdjustmentAuditDto.desc]
  static final desc =
      QueryStringProperty<AdjustmentAuditDto>(_entities[12].properties[2]);

  /// see [AdjustmentAuditDto.summary]
  static final summary =
      QueryRelationToOne<AdjustmentAuditDto, SummaryAuditDto>(
          _entities[12].properties[3]);
}

/// [SummaryAuditDto] entity fields to define ObjectBox queries.
class SummaryAuditDto_ {
  /// see [SummaryAuditDto.id]
  static final id =
      QueryIntegerProperty<SummaryAuditDto>(_entities[13].properties[0]);

  /// see [SummaryAuditDto.toko]
  static final toko =
      QueryStringProperty<SummaryAuditDto>(_entities[13].properties[1]);

  /// see [SummaryAuditDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<SummaryAuditDto>(_entities[13].properties[2]);

  /// see [SummaryAuditDto.values]
  static final values =
      QueryDoubleProperty<SummaryAuditDto>(_entities[13].properties[3]);

  /// see [SummaryAuditDto.status]
  static final status =
      QueryIntegerProperty<SummaryAuditDto>(_entities[13].properties[4]);
}

/// [KurangSetorDto] entity fields to define ObjectBox queries.
class KurangSetorDto_ {
  /// see [KurangSetorDto.id]
  static final id =
      QueryIntegerProperty<KurangSetorDto>(_entities[14].properties[0]);

  /// see [KurangSetorDto.tanggal]
  static final tanggal =
      QueryIntegerProperty<KurangSetorDto>(_entities[14].properties[1]);

  /// see [KurangSetorDto.nominal]
  static final nominal =
      QueryDoubleProperty<KurangSetorDto>(_entities[14].properties[2]);

  /// see [KurangSetorDto.summary]
  static final summary = QueryRelationToOne<KurangSetorDto, MasterOpnameDto>(
      _entities[14].properties[3]);
}
